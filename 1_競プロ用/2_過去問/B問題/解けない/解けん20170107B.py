from sys import stdin
#------------------整数のリスト-----------------------
def make_intList_func():
    readline = stdin.readline
    intList = list(map(int, readline().split()))
    return intList
#------------------------------------------------
#------------------------------------------------
def count_valid_combinations(K, S):
    count = 0
    for X in range(K + 1):
        print(" ")
        print("(S - X) = " + str((S - X)))
        if 0 <= (S - X) <= 2 * K:
            print("0 <= (S - X) = " + str((S - X)) + " <= " + str(2 * K))
            # (Y + Z) = (S - X) となる組み合わせを数える
            # Y の範囲は max(0, (S - X) - K) から min(K, (S - X)) まで
            min_Y = max(0, (S - X) - K)
            max_Y = min(K, (S - X))
            print("min(S - X) = min_Y = " + str(min_Y))
            print("max(S - X) = max_Y = " + str(max_Y))
            count += (max_Y - min_Y + 1)
            print("max_Y - min_Y + 1 = " + str(max_Y - min_Y + 1))
    return count
#--------------------------------------------------------------------
inputList1 = make_intList_func()

K = inputList1[0]
S = inputList1[1]

print("\n" + "Answer: " + str(count_valid_combinations(K, S)))

#--------------------------方針--------------------------------
#計算量を O(K) で済ませるためには、ループのネストを避ける必要があります。そのためには、以下のように各組み合わせを数えるアルゴリズムを工夫します。
# X を 0 から K まで一度だけループする。
#その中で Y+Z=S−X となる Y と Z の組み合わせを数える。
#具体的には、以下のようなステップを踏みます：
# 0≤X≤K の各 X に対して S−X が範囲内かどうかを確認する。
# その中で 0≤Y≤K と 0≤Z≤K の条件を満たす Y, Z の数を数える。
#--------------------------解説--------------------------------
# X を 0 から K までループします。X を固定したとき、 Y+Z = S−X となる必要があります。
# "if 0 <= (S - X) = (Y + Z) <= 2 * K" の部分は、 S の最大値が 3K で X の最大値が K であることから、 (S - x) <= 3K - K = 2K となる。
# Y の取りうる範囲は max(0, (S - X) - K) から min(K, (S - X)) までです。
#これは Y が 0 から K の範囲であることと、 Z も 0 から K の範囲であることを考慮した結果です。
#実際、Y = (S - X) - K として (Y + Z) = (S - X) に代入すると Z = K であり、Y = (S - X) として (Y + Z) = (S - X) に代入すると Z = 0となる。 
#また、S = 2K, X = 0 として max_Y と min_Y に代入すると、 max_Y = 2K,  min_Y = K となり、 Y の範囲は K <= Y <= 2K <-> 0 <= Y <= K となる。
#取りうる Y の個数は max_Y − min_Y+1 です。この式は min_Y から max_Y までの数字の個数を数える式です。
#例えば、min_Y = 0, max_Y = 3 のとき、整数の個数は0から3までの4つ (max_Y − min_Y+1 = 3 - 0 + 1 = 4) です。
# Z の値は Y の値に依存するため、数える必要はない。
#例えば、(S - X) = 3 の時、0 <= Y + Z <= 3 となり、これを満たす (Y, Z) は (0, 3) (1, 2) (2, 1) (3, 0) の４つで、これは Y の値の個数を数えることで求めることができる。
#この方法では、ループが X の範囲だけであり、それぞれの X について定数時間で計算するため、全体の計算量は O(K) となります。