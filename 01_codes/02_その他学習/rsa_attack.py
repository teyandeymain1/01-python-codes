c = 514623
e = 17
n = 580799

def factor_n(n):
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return i, n // i
    return None, None

p, q = factor_n(n)
if p is None:
    raise Exception(f"n={n} の因数分解に失敗しました。")
print(f"得られた素因数: p={p}, q={q}")

phi_n = (p - 1) * (q - 1)

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def mod_inverse(a, m):
    def egcd(a, b):
        if a == 0:
            return b, 0, 1
        g, x1, y1 = egcd(b % a, a)
        return g, y1 - (b // a) * x1, x1

    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception("逆数が存在しません")
    return x % m

# 秘密鍵 d を計算
d = mod_inverse(e, phi_n)
print(f"計算された秘密鍵 d: {d}")

m = pow(c, d, n)
print(f"復号された平文 (整数): {m}")



# 与えられた値
e = 3
n = int("158090829270326007946765280558975832568607561438395878439204788787141980"
        "54391411435179292273138370014089669074702180400728135087989010718418431316"
        "27466872273169673979175183128925550637563155904695197835112528961388877108"
        "57127078517291040517656779887035372194170295859629774232207593703985130105"
        "49934010110527767930052745968162668127648073152725708868204373399202109317"
        "17828137839560441144607289867718025891899941903250909786590491063199878706"
        "70112125526678345115031182658337330309160681405950175041345632205860680395"
        "12071614158359917793237506732544653483262786629508308582364928196906265428"
        "384320959086252759443783821")
c = int("114563087844816762759243301693051124766319014494741620691651734786217904"
        "31279763719838667438319098502993280985863412800548813945221688705444672")

# 3乗根を計算
def cube_root(n, e):
    return int(round(n ** (1/e)))
print(f"cの3乗根: {cube_root(c, e)}")



# E:y^2=x^3+ax+b を辞書型 E = {"a":0,"b":1} で表す．
# 楕円曲線上の点 P,Q は座標は配列で表される．例えば，P[0] は P の x 座標を，P[1] は P の y 座標を表す．
def ec_add(E, P, Q):
    """
    楕円曲線 E: y^2 = x^3 + a x + b 上の点 P, Q の加算を行う。
    E は {'a': <係数 a>, 'b': <係数 b>} の辞書で表す。
    P, Q は (x, y) のタプル、無限遠点は None で表す。
    """
    # 無限遠点の扱い
    inf = "infinty point!"

    if P == inf:
        return Q
    elif Q == inf:
        return P
    else:
        x1, y1 = P[0],P[1]
        x2, y2 = Q[0],Q[1]

    # P + (x, −y) = ∞
    if x1 == x2 and y1 == -y2:
        return inf

    # 楕円曲線 E:y^2=x^3+ax+b の a の値を呼び出す．
    a = E['a']

    # P = Q の場合は接線の傾き、そうでない場合は割線の傾き
    if P == Q:
        # λ = (3 x1^2 + a) / (2 y1)
        lmd = (3*x1**2+a)/(2*y1)
    else:
        # λ = (y2 − y1) / (x2 − x1)
        lmd = (y2 - y1) / (x2 - x1)

    # 加算後の座標
    x3 = lmd**2 - x1 - x2
    y3 = lmd*(x1 - x3) - y1

    return (x3, y3)

# 使い方例
E = {'a': 0, 'b': 1}
P = (2, 3)
Q = (5, 7)

R = ec_add(E, P, Q)
print('P + Q =', R)